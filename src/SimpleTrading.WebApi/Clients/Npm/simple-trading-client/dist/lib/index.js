"use strict";
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
Object.defineProperty(exports, "__esModule", {value: true});
exports.SimpleTradingClientException = exports.SwaggerResponse = exports.UpdateTradeDto = exports.UpdateReferenceDto = exports.UInt16SuccessResponse = exports.TradeDto = exports.SuccessResponse = exports.StringUpdatedValue = exports.ResultDtoNullableUpdatedValue = exports.ResultDto = exports.ReferenceTypeDto = exports.ReferenceDto = exports.ProfileDto = exports.ProblemDetails = exports.GuidSuccessResponse = exports.FieldError = exports.ErrorResponse = exports.DecimalNullableUpdatedValue = exports.CurrencyDto = exports.CloseTradeDto = exports.AssetDto = exports.ApiInfo = exports.AddTradeDto = exports.AddReferenceDto = exports.SimpleTradingClient = void 0;

class SimpleTradingClient {
    http;
    baseUrl;
    jsonParseReviver = undefined;

    constructor(baseUrl, http) {
        this.http = http ? http : window;
        this.baseUrl = baseUrl ?? "/";
    }

    /**
     * @return OK
     */
    getAppInfo() {
        let url_ = this.baseUrl + "/home/info";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetAppInfo(_response);
        });
    }

    processGetAppInfo(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }

        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiInfo.fromJS(resultData200);
                return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(new SwaggerResponse(status, _headers, null));
    }

    /**
     * @return OK
     */
    getTrade(tradeId) {
        let url_ = this.baseUrl + "/trades/{tradeId}";
        if (tradeId === undefined || tradeId === null)
            throw new Error("The parameter 'tradeId' must be defined.");
        url_ = url_.replace("{tradeId}", encodeURIComponent("" + tradeId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetTrade(_response);
        });
    }

    processGetTrade(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }

        if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = TradeDto.fromJS(resultData200);
                return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorResponse.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(new SwaggerResponse(status, _headers, null));
    }

    /**
     * @param body (optional)
     * @return OK
     */
    updateTrade(tradeId, body) {
        let url_ = this.baseUrl + "/trades/{tradeId}";
        if (tradeId === undefined || tradeId === null)
            throw new Error("The parameter 'tradeId' must be defined.");
        url_ = url_.replace("{tradeId}", encodeURIComponent("" + tradeId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processUpdateTrade(_response);
        });
    }

    processUpdateTrade(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }

        if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = SuccessResponse.fromJS(resultData200);
                return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorResponse.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ErrorResponse.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
                let result422 = null;
                let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result422 = ErrorResponse.fromJS(resultData422);
                return throwException("Unprocessable Content", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(new SwaggerResponse(status, _headers, null));
    }

    /**
     * @return OK
     */
    deleteTrade(tradeId) {
        let url_ = this.baseUrl + "/trades/{tradeId}";
        if (tradeId === undefined || tradeId === null)
            throw new Error("The parameter 'tradeId' must be defined.");
        url_ = url_.replace("{tradeId}", encodeURIComponent("" + tradeId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processDeleteTrade(_response);
        });
    }

    processDeleteTrade(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }

        if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = SuccessResponse.fromJS(resultData200);
                return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(new SwaggerResponse(status, _headers, null));
    }

    /**
     * @param body (optional)
     * @return OK
     */
    addTrade(body) {
        let url_ = this.baseUrl + "/trades";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processAddTrade(_response);
        });
    }

    processAddTrade(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }

        if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidSuccessResponse.fromJS(resultData200);
                return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorResponse.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ErrorResponse.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
                let result422 = null;
                let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result422 = ErrorResponse.fromJS(resultData422);
                return throwException("Unprocessable Content", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(new SwaggerResponse(status, _headers, null));
    }

    /**
     * @param body (optional)
     * @return OK
     */
    closeTrade(tradeId, body) {
        let url_ = this.baseUrl + "/trades/{tradeId}/close";
        if (tradeId === undefined || tradeId === null)
            throw new Error("The parameter 'tradeId' must be defined.");
        url_ = url_.replace("{tradeId}", encodeURIComponent("" + tradeId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processCloseTrade(_response);
        });
    }

    processCloseTrade(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }

        if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = SuccessResponse.fromJS(resultData200);
                return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorResponse.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ErrorResponse.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
                let result422 = null;
                let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result422 = ErrorResponse.fromJS(resultData422);
                return throwException("Unprocessable Content", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(new SwaggerResponse(status, _headers, null));
    }

    /**
     * @return OK
     */
    getReference(tradeId, referenceId) {
        let url_ = this.baseUrl + "/trades/{tradeId}/references/{referenceId}";
        if (tradeId === undefined || tradeId === null)
            throw new Error("The parameter 'tradeId' must be defined.");
        url_ = url_.replace("{tradeId}", encodeURIComponent("" + tradeId));
        if (referenceId === undefined || referenceId === null)
            throw new Error("The parameter 'referenceId' must be defined.");
        url_ = url_.replace("{referenceId}", encodeURIComponent("" + referenceId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetReference(_response);
        });
    }

    processGetReference(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }

        if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ReferenceDto.fromJS(resultData200);
                return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ErrorResponse.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(new SwaggerResponse(status, _headers, null));
    }

    /**
     * @param body (optional)
     * @return OK
     */
    updateReference(tradeId, referenceId, body) {
        let url_ = this.baseUrl + "/trades/{tradeId}/references/{referenceId}";
        if (tradeId === undefined || tradeId === null)
            throw new Error("The parameter 'tradeId' must be defined.");
        url_ = url_.replace("{tradeId}", encodeURIComponent("" + tradeId));
        if (referenceId === undefined || referenceId === null)
            throw new Error("The parameter 'referenceId' must be defined.");
        url_ = url_.replace("{referenceId}", encodeURIComponent("" + referenceId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processUpdateReference(_response);
        });
    }

    processUpdateReference(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }

        if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = SuccessResponse.fromJS(resultData200);
                return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorResponse.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ErrorResponse.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(new SwaggerResponse(status, _headers, null));
    }

    /**
     * @return OK
     */
    deleteReference(tradeId, referenceId) {
        let url_ = this.baseUrl + "/trades/{tradeId}/references/{referenceId}";
        if (tradeId === undefined || tradeId === null)
            throw new Error("The parameter 'tradeId' must be defined.");
        url_ = url_.replace("{tradeId}", encodeURIComponent("" + tradeId));
        if (referenceId === undefined || referenceId === null)
            throw new Error("The parameter 'referenceId' must be defined.");
        url_ = url_.replace("{referenceId}", encodeURIComponent("" + referenceId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processDeleteReference(_response);
        });
    }

    processDeleteReference(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }

        if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = SuccessResponse.fromJS(resultData200);
                return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ErrorResponse.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(new SwaggerResponse(status, _headers, null));
    }

    /**
     * @return OK
     */
    getReferences(tradeId) {
        let url_ = this.baseUrl + "/trades/{tradeId}/references";
        if (tradeId === undefined || tradeId === null)
            throw new Error("The parameter 'tradeId' must be defined.");
        url_ = url_.replace("{tradeId}", encodeURIComponent("" + tradeId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetReferences(_response);
        });
    }

    processGetReferences(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }

        if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ReferenceDto.fromJS(item));
                } else {
                    result200 = null;
                }
                return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ErrorResponse.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(new SwaggerResponse(status, _headers, null));
    }

    /**
     * @param body (optional)
     * @return OK
     */
    addReference(tradeId, body) {
        let url_ = this.baseUrl + "/trades/{tradeId}/references";
        if (tradeId === undefined || tradeId === null)
            throw new Error("The parameter 'tradeId' must be defined.");
        url_ = url_.replace("{tradeId}", encodeURIComponent("" + tradeId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processAddReference(_response);
        });
    }

    processAddReference(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }

        if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = GuidSuccessResponse.fromJS(resultData200);
                return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorResponse.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ErrorResponse.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
                let result422 = null;
                let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result422 = ErrorResponse.fromJS(resultData422);
                return throwException("Unprocessable Content", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(new SwaggerResponse(status, _headers, null));
    }

    /**
     * @return OK
     */
    deleteReferences(tradeId) {
        let url_ = this.baseUrl + "/trades/{tradeId}/references";
        if (tradeId === undefined || tradeId === null)
            throw new Error("The parameter 'tradeId' must be defined.");
        url_ = url_.replace("{tradeId}", encodeURIComponent("" + tradeId));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processDeleteReferences(_response);
        });
    }

    processDeleteReferences(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }

        if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = UInt16SuccessResponse.fromJS(resultData200);
                return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ErrorResponse.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(new SwaggerResponse(status, _headers, null));
    }

    /**
     * @param searchTerm (optional)
     * @return OK
     */
    getAssets(searchTerm) {
        let url_ = this.baseUrl + "/assets?";
        if (searchTerm === null)
            throw new Error("The parameter 'searchTerm' cannot be null.");
        else if (searchTerm !== undefined)
            url_ += "searchTerm=" + encodeURIComponent("" + searchTerm) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetAssets(_response);
        });
    }

    processGetAssets(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }

        if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(AssetDto.fromJS(item));
                } else {
                    result200 = null;
                }
                return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorResponse.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(new SwaggerResponse(status, _headers, null));
    }

    /**
     * @param searchTerm (optional)
     * @return OK
     */
    getProfiles(searchTerm) {
        let url_ = this.baseUrl + "/profiles?";
        if (searchTerm === null)
            throw new Error("The parameter 'searchTerm' cannot be null.");
        else if (searchTerm !== undefined)
            url_ += "searchTerm=" + encodeURIComponent("" + searchTerm) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetProfiles(_response);
        });
    }

    processGetProfiles(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }

        if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(ProfileDto.fromJS(item));
                } else {
                    result200 = null;
                }
                return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorResponse.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(new SwaggerResponse(status, _headers, null));
    }

    /**
     * @param searchTerm (optional)
     * @return OK
     */
    getCurrencies(searchTerm) {
        let url_ = this.baseUrl + "/currencies?";
        if (searchTerm === null)
            throw new Error("The parameter 'searchTerm' cannot be null.");
        else if (searchTerm !== undefined)
            url_ += "searchTerm=" + encodeURIComponent("" + searchTerm) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then((_response) => {
            return this.processGetCurrencies(_response);
        });
    }

    processGetCurrencies(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }

        if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(CurrencyDto.fromJS(item));
                } else {
                    result200 = null;
                }
                return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorResponse.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(new SwaggerResponse(status, _headers, null));
    }
}

exports.SimpleTradingClient = SimpleTradingClient;

class AddReferenceDto {
    type;
    link;
    notes;

    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }

    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new AddReferenceDto();
        result.init(data);
        return result;
    }

    init(_data) {
        if (_data) {
            this.type = _data["type"];
            this.link = _data["link"];
            this.notes = _data["notes"];
        }
    }

    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["link"] = this.link;
        data["notes"] = this.notes;
        return data;
    }
}

exports.AddReferenceDto = AddReferenceDto;

class AddTradeDto {
    assetId;
    profileId;
    opened;
    closed;
    size;
    result;
    balance;
    currencyId;
    entryPrice;
    stopLoss;
    takeProfit;
    exitPrice;
    notes;
    references;

    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }

    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new AddTradeDto();
        result.init(data);
        return result;
    }

    init(_data) {
        if (_data) {
            this.assetId = _data["assetId"];
            this.profileId = _data["profileId"];
            this.opened = _data["opened"] ? new Date(_data["opened"].toString()) : undefined;
            this.closed = _data["closed"] ? new Date(_data["closed"].toString()) : undefined;
            this.size = _data["size"];
            this.result = _data["result"];
            this.balance = _data["balance"];
            this.currencyId = _data["currencyId"];
            this.entryPrice = _data["entryPrice"];
            this.stopLoss = _data["stopLoss"];
            this.takeProfit = _data["takeProfit"];
            this.exitPrice = _data["exitPrice"];
            this.notes = _data["notes"];
            if (Array.isArray(_data["references"])) {
                this.references = [];
                for (let item of _data["references"])
                    this.references.push(AddReferenceDto.fromJS(item));
            }
        }
    }

    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId;
        data["profileId"] = this.profileId;
        data["opened"] = this.opened ? this.opened.toISOString() : undefined;
        data["closed"] = this.closed ? this.closed.toISOString() : undefined;
        data["size"] = this.size;
        data["result"] = this.result;
        data["balance"] = this.balance;
        data["currencyId"] = this.currencyId;
        data["entryPrice"] = this.entryPrice;
        data["stopLoss"] = this.stopLoss;
        data["takeProfit"] = this.takeProfit;
        data["exitPrice"] = this.exitPrice;
        data["notes"] = this.notes;
        if (Array.isArray(this.references)) {
            data["references"] = [];
            for (let item of this.references)
                data["references"].push(item.toJSON());
        }
        return data;
    }
}

exports.AddTradeDto = AddTradeDto;

class ApiInfo {
    name;
    version;
    environment;

    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }

    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ApiInfo();
        result.init(data);
        return result;
    }

    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.version = _data["version"];
            this.environment = _data["environment"];
        }
    }

    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["version"] = this.version;
        data["environment"] = this.environment;
        return data;
    }
}

exports.ApiInfo = ApiInfo;

class AssetDto {
    id;
    symbol;
    name;

    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }

    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new AssetDto();
        result.init(data);
        return result;
    }

    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.symbol = _data["symbol"];
            this.name = _data["name"];
        }
    }

    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["symbol"] = this.symbol;
        data["name"] = this.name;
        return data;
    }
}

exports.AssetDto = AssetDto;

class CloseTradeDto {
    balance;
    exitPrice;
    closed;
    result;

    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }

    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CloseTradeDto();
        result.init(data);
        return result;
    }

    init(_data) {
        if (_data) {
            this.balance = _data["balance"];
            this.exitPrice = _data["exitPrice"];
            this.closed = _data["closed"] ? new Date(_data["closed"].toString()) : undefined;
            this.result = _data["result"];
        }
    }

    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["balance"] = this.balance;
        data["exitPrice"] = this.exitPrice;
        data["closed"] = this.closed ? this.closed.toISOString() : undefined;
        data["result"] = this.result;
        return data;
    }
}

exports.CloseTradeDto = CloseTradeDto;

class CurrencyDto {
    id;
    isoCode;
    name;

    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }

    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new CurrencyDto();
        result.init(data);
        return result;
    }

    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.isoCode = _data["isoCode"];
            this.name = _data["name"];
        }
    }

    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isoCode"] = this.isoCode;
        data["name"] = this.name;
        return data;
    }
}

exports.CurrencyDto = CurrencyDto;

class DecimalNullableUpdatedValue {
    value;

    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }

    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DecimalNullableUpdatedValue();
        result.init(data);
        return result;
    }

    init(_data) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data;
    }
}

exports.DecimalNullableUpdatedValue = DecimalNullableUpdatedValue;

class ErrorResponse {
    fieldErrors;
    commonErrors;

    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }

    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorResponse();
        result.init(data);
        return result;
    }

    init(_data) {
        if (_data) {
            if (Array.isArray(_data["fieldErrors"])) {
                this.fieldErrors = [];
                for (let item of _data["fieldErrors"])
                    this.fieldErrors.push(FieldError.fromJS(item));
            }
            if (Array.isArray(_data["commonErrors"])) {
                this.commonErrors = [];
                for (let item of _data["commonErrors"])
                    this.commonErrors.push(item);
            }
        }
    }

    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.fieldErrors)) {
            data["fieldErrors"] = [];
            for (let item of this.fieldErrors)
                data["fieldErrors"].push(item.toJSON());
        }
        if (Array.isArray(this.commonErrors)) {
            data["commonErrors"] = [];
            for (let item of this.commonErrors)
                data["commonErrors"].push(item);
        }
        return data;
    }
}

exports.ErrorResponse = ErrorResponse;

class FieldError {
    identifier;
    messages;

    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }

    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new FieldError();
        result.init(data);
        return result;
    }

    init(_data) {
        if (_data) {
            this.identifier = _data["identifier"];
            if (Array.isArray(_data["messages"])) {
                this.messages = [];
                for (let item of _data["messages"])
                    this.messages.push(item);
            }
        }
    }

    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["identifier"] = this.identifier;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item);
        }
        return data;
    }
}

exports.FieldError = FieldError;

class GuidSuccessResponse {
    data;
    warnings;

    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }

    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new GuidSuccessResponse();
        result.init(data);
        return result;
    }

    init(_data) {
        if (_data) {
            this.data = _data["data"];
            if (Array.isArray(_data["warnings"])) {
                this.warnings = [];
                for (let item of _data["warnings"])
                    this.warnings.push(item);
            }
        }
    }

    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data;
        if (Array.isArray(this.warnings)) {
            data["warnings"] = [];
            for (let item of this.warnings)
                data["warnings"].push(item);
        }
        return data;
    }
}

exports.GuidSuccessResponse = GuidSuccessResponse;

class ProblemDetails {
    type;
    title;
    status;
    detail;
    instance;

    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }

    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    init(_data) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

exports.ProblemDetails = ProblemDetails;

class ProfileDto {
    id;
    name;
    description;
    isSelected;

    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }

    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ProfileDto();
        result.init(data);
        return result;
    }

    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.isSelected = _data["isSelected"];
        }
    }

    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["isSelected"] = this.isSelected;
        return data;
    }
}

exports.ProfileDto = ProfileDto;

class ReferenceDto {
    id;
    type;
    link;
    notes;

    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }

    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ReferenceDto();
        result.init(data);
        return result;
    }

    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.link = _data["link"];
            this.notes = _data["notes"];
        }
    }

    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["link"] = this.link;
        data["notes"] = this.notes;
        return data;
    }
}

exports.ReferenceDto = ReferenceDto;
var ReferenceTypeDto;
(function (ReferenceTypeDto) {
    ReferenceTypeDto["TradingView"] = "TradingView";
    ReferenceTypeDto["Other"] = "Other";
})(ReferenceTypeDto || (exports.ReferenceTypeDto = ReferenceTypeDto = {}));
var ResultDto;
(function (ResultDto) {
    ResultDto["Win"] = "Win";
    ResultDto["Mediocre"] = "Mediocre";
    ResultDto["BreakEven"] = "BreakEven";
    ResultDto["Loss"] = "Loss";
})(ResultDto || (exports.ResultDto = ResultDto = {}));

class ResultDtoNullableUpdatedValue {
    value;

    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }

    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDtoNullableUpdatedValue();
        result.init(data);
        return result;
    }

    init(_data) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data;
    }
}

exports.ResultDtoNullableUpdatedValue = ResultDtoNullableUpdatedValue;

class StringUpdatedValue {
    value;

    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }

    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new StringUpdatedValue();
        result.init(data);
        return result;
    }

    init(_data) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data;
    }
}

exports.StringUpdatedValue = StringUpdatedValue;

class SuccessResponse {
    warnings;

    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }

    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SuccessResponse();
        result.init(data);
        return result;
    }

    init(_data) {
        if (_data) {
            if (Array.isArray(_data["warnings"])) {
                this.warnings = [];
                for (let item of _data["warnings"])
                    this.warnings.push(item);
            }
        }
    }

    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.warnings)) {
            data["warnings"] = [];
            for (let item of this.warnings)
                data["warnings"].push(item);
        }
        return data;
    }
}

exports.SuccessResponse = SuccessResponse;

class TradeDto {
    id;
    assetId;
    asset;
    profileId;
    profile;
    size;
    opened;
    closed;
    balance;
    result;
    performance;
    isClosed;
    currencyId;
    currency;
    entry;
    stopLoss;
    takeProfit;
    exitPrice;
    riskRewardRatio;
    references;
    notes;

    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }

    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new TradeDto();
        result.init(data);
        return result;
    }

    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.assetId = _data["assetId"];
            this.asset = _data["asset"];
            this.profileId = _data["profileId"];
            this.profile = _data["profile"];
            this.size = _data["size"];
            this.opened = _data["opened"] ? new Date(_data["opened"].toString()) : undefined;
            this.closed = _data["closed"] ? new Date(_data["closed"].toString()) : undefined;
            this.balance = _data["balance"];
            this.result = _data["result"];
            this.performance = _data["performance"];
            this.isClosed = _data["isClosed"];
            this.currencyId = _data["currencyId"];
            this.currency = _data["currency"];
            this.entry = _data["entry"];
            this.stopLoss = _data["stopLoss"];
            this.takeProfit = _data["takeProfit"];
            this.exitPrice = _data["exitPrice"];
            this.riskRewardRatio = _data["riskRewardRatio"];
            if (Array.isArray(_data["references"])) {
                this.references = [];
                for (let item of _data["references"])
                    this.references.push(ReferenceDto.fromJS(item));
            }
            this.notes = _data["notes"];
        }
    }

    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["assetId"] = this.assetId;
        data["asset"] = this.asset;
        data["profileId"] = this.profileId;
        data["profile"] = this.profile;
        data["size"] = this.size;
        data["opened"] = this.opened ? this.opened.toISOString() : undefined;
        data["closed"] = this.closed ? this.closed.toISOString() : undefined;
        data["balance"] = this.balance;
        data["result"] = this.result;
        data["performance"] = this.performance;
        data["isClosed"] = this.isClosed;
        data["currencyId"] = this.currencyId;
        data["currency"] = this.currency;
        data["entry"] = this.entry;
        data["stopLoss"] = this.stopLoss;
        data["takeProfit"] = this.takeProfit;
        data["exitPrice"] = this.exitPrice;
        data["riskRewardRatio"] = this.riskRewardRatio;
        if (Array.isArray(this.references)) {
            data["references"] = [];
            for (let item of this.references)
                data["references"].push(item.toJSON());
        }
        data["notes"] = this.notes;
        return data;
    }
}

exports.TradeDto = TradeDto;

class UInt16SuccessResponse {
    data;
    warnings;

    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }

    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UInt16SuccessResponse();
        result.init(data);
        return result;
    }

    init(_data) {
        if (_data) {
            this.data = _data["data"];
            if (Array.isArray(_data["warnings"])) {
                this.warnings = [];
                for (let item of _data["warnings"])
                    this.warnings.push(item);
            }
        }
    }

    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data;
        if (Array.isArray(this.warnings)) {
            data["warnings"] = [];
            for (let item of this.warnings)
                data["warnings"].push(item);
        }
        return data;
    }
}

exports.UInt16SuccessResponse = UInt16SuccessResponse;

class UpdateReferenceDto {
    type;
    link;
    notes;

    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }

    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateReferenceDto();
        result.init(data);
        return result;
    }

    init(_data) {
        if (_data) {
            this.type = _data["type"];
            this.link = _data["link"];
            this.notes = _data["notes"] ? StringUpdatedValue.fromJS(_data["notes"]) : undefined;
        }
    }

    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["link"] = this.link;
        data["notes"] = this.notes ? this.notes.toJSON() : undefined;
        return data;
    }
}

exports.UpdateReferenceDto = UpdateReferenceDto;

class UpdateTradeDto {
    assetId;
    profileId;
    opened;
    closed;
    size;
    result;
    balance;
    currencyId;
    entryPrice;
    stopLoss;
    takeProfit;
    exitPrice;
    notes;

    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }

    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTradeDto();
        result.init(data);
        return result;
    }

    init(_data) {
        if (_data) {
            this.assetId = _data["assetId"];
            this.profileId = _data["profileId"];
            this.opened = _data["opened"] ? new Date(_data["opened"].toString()) : undefined;
            this.closed = _data["closed"] ? new Date(_data["closed"].toString()) : undefined;
            this.size = _data["size"];
            this.result = _data["result"] ? ResultDtoNullableUpdatedValue.fromJS(_data["result"]) : undefined;
            this.balance = _data["balance"];
            this.currencyId = _data["currencyId"];
            this.entryPrice = _data["entryPrice"];
            this.stopLoss = _data["stopLoss"] ? DecimalNullableUpdatedValue.fromJS(_data["stopLoss"]) : undefined;
            this.takeProfit = _data["takeProfit"] ? DecimalNullableUpdatedValue.fromJS(_data["takeProfit"]) : undefined;
            this.exitPrice = _data["exitPrice"] ? DecimalNullableUpdatedValue.fromJS(_data["exitPrice"]) : undefined;
            this.notes = _data["notes"] ? StringUpdatedValue.fromJS(_data["notes"]) : undefined;
        }
    }

    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId;
        data["profileId"] = this.profileId;
        data["opened"] = this.opened ? this.opened.toISOString() : undefined;
        data["closed"] = this.closed ? this.closed.toISOString() : undefined;
        data["size"] = this.size;
        data["result"] = this.result ? this.result.toJSON() : undefined;
        data["balance"] = this.balance;
        data["currencyId"] = this.currencyId;
        data["entryPrice"] = this.entryPrice;
        data["stopLoss"] = this.stopLoss ? this.stopLoss.toJSON() : undefined;
        data["takeProfit"] = this.takeProfit ? this.takeProfit.toJSON() : undefined;
        data["exitPrice"] = this.exitPrice ? this.exitPrice.toJSON() : undefined;
        data["notes"] = this.notes ? this.notes.toJSON() : undefined;
        return data;
    }
}

exports.UpdateTradeDto = UpdateTradeDto;

class SwaggerResponse {
    status;
    headers;
    result;

    constructor(status, headers, result) {
        this.status = status;
        this.headers = headers;
        this.result = result;
    }
}

exports.SwaggerResponse = SwaggerResponse;

class SimpleTradingClientException extends Error {
    message;
    status;
    response;
    headers;
    result;
    isSimpleTradingClientException = true;

    constructor(message, status, response, headers, result) {
        super();
        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    static isSimpleTradingClientException(obj) {
        return obj.isSimpleTradingClientException === true;
    }
}

exports.SimpleTradingClientException = SimpleTradingClientException;

function throwException(message, status, response, headers, result) {
    throw new SimpleTradingClientException(message, status, response, headers, result);
}
