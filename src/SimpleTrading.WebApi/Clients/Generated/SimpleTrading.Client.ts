//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */

// ReSharper disable InconsistentNaming

export interface ISimpleTradingClient {

    /**
     * @return OK
     */
    getAppInfo(): Promise<SwaggerResponse<ApiInfo>>;

    /**
     * @param body (optional)
     * @return OK
     */
    addTrade(body: AddTradeDto | undefined): Promise<SwaggerResponse<string>>;

    /**
     * @param body (optional)
     * @return No Content
     */
    finishTrade(tradeId: string, body: FinishTradeDto | undefined): Promise<SwaggerResponse<void>>;
}

export class SimpleTradingClient implements ISimpleTradingClient {
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "/";
    }

    /**
     * @return OK
     */
    getAppInfo(): Promise<SwaggerResponse<ApiInfo>> {
        let url_ = this.baseUrl + "/home/info";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAppInfo(_response);
        });
    }

    /**
     * @param body (optional)
     * @return OK
     */
    addTrade(body: AddTradeDto | undefined): Promise<SwaggerResponse<string>> {
        let url_ = this.baseUrl + "/trades";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddTrade(_response);
        });
    }

    /**
     * @param body (optional)
     * @return No Content
     */
    finishTrade(tradeId: string, body: FinishTradeDto | undefined): Promise<SwaggerResponse<void>> {
        let url_ = this.baseUrl + "/trades/{tradeId}/finish";
        if (tradeId === undefined || tradeId === null)
            throw new Error("The parameter 'tradeId' must be defined.");
        url_ = url_.replace("{tradeId}", encodeURIComponent("" + tradeId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFinishTrade(_response);
        });
    }

    protected processGetAppInfo(response: Response): Promise<SwaggerResponse<ApiInfo>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        }
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ApiInfo.fromJS(resultData200);
                return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SwaggerResponse<ApiInfo>>(new SwaggerResponse(status, _headers, null as any));
    }

    protected processAddTrade(response: Response): Promise<SwaggerResponse<string>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        }
        if (status === 401) {
            return response.text().then((_responseText) => {
                let result401: any = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;

                return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400: any = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorResponse.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404: any = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ErrorResponse.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
                let result422: any = null;
                let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result422 = ErrorResponse.fromJS(resultData422);
                return throwException("Unprocessable Content", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SwaggerResponse<string>>(new SwaggerResponse(status, _headers, null as any));
    }

    protected processFinishTrade(response: Response): Promise<SwaggerResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        }
        if (status === 401) {
            return response.text().then((_responseText) => {
                let result401: any = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 204) {
            return response.text().then((_responseText) => {
                return new SwaggerResponse(status, _headers, null as any);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400: any = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ErrorResponse.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404: any = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ErrorResponse.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
                let result422: any = null;
                let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result422 = ErrorResponse.fromJS(resultData422);
                return throwException("Unprocessable Content", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, null as any));
    }
}

export class AddTradeDto implements IAddTradeDto {
    assetId?: string | undefined;
    profileId?: string | undefined;
    openedAt?: Date | undefined;
    finishedAt?: Date | undefined;
    size?: number | undefined;
    result?: ResultDto;
    balance?: number | undefined;
    currencyId?: string | undefined;
    entryPrice?: number | undefined;
    stopLoss?: number | undefined;
    takeProfit?: number | undefined;
    notes?: string | undefined;
    references?: ReferenceDto[] | undefined;

    constructor(data?: IAddTradeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    static fromJS(data: any): AddTradeDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddTradeDto();
        result.init(data);
        return result;
    }

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"];
            this.profileId = _data["profileId"];
            this.openedAt = _data["openedAt"] ? new Date(_data["openedAt"].toString()) : <any>undefined;
            this.finishedAt = _data["finishedAt"] ? new Date(_data["finishedAt"].toString()) : <any>undefined;
            this.size = _data["size"];
            this.result = _data["result"];
            this.balance = _data["balance"];
            this.currencyId = _data["currencyId"];
            this.entryPrice = _data["entryPrice"];
            this.stopLoss = _data["stopLoss"];
            this.takeProfit = _data["takeProfit"];
            this.notes = _data["notes"];
            if (Array.isArray(_data["references"])) {
                this.references = [] as any;
                for (let item of _data["references"])
                    this.references!.push(ReferenceDto.fromJS(item));
            }
        }
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId;
        data["profileId"] = this.profileId;
        data["openedAt"] = this.openedAt ? this.openedAt.toISOString() : <any>undefined;
        data["finishedAt"] = this.finishedAt ? this.finishedAt.toISOString() : <any>undefined;
        data["size"] = this.size;
        data["result"] = this.result;
        data["balance"] = this.balance;
        data["currencyId"] = this.currencyId;
        data["entryPrice"] = this.entryPrice;
        data["stopLoss"] = this.stopLoss;
        data["takeProfit"] = this.takeProfit;
        data["notes"] = this.notes;
        if (Array.isArray(this.references)) {
            data["references"] = [];
            for (let item of this.references)
                data["references"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAddTradeDto {
    assetId?: string | undefined;
    profileId?: string | undefined;
    openedAt?: Date | undefined;
    finishedAt?: Date | undefined;
    size?: number | undefined;
    result?: ResultDto;
    balance?: number | undefined;
    currencyId?: string | undefined;
    entryPrice?: number | undefined;
    stopLoss?: number | undefined;
    takeProfit?: number | undefined;
    notes?: string | undefined;
    references?: ReferenceDto[] | undefined;
}

export class ApiInfo implements IApiInfo {
    name?: string | undefined;
    version?: string | undefined;
    environment?: string | undefined;

    constructor(data?: IApiInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    static fromJS(data: any): ApiInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ApiInfo();
        result.init(data);
        return result;
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.version = _data["version"];
            this.environment = _data["environment"];
        }
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["version"] = this.version;
        data["environment"] = this.environment;
        return data;
    }
}

export interface IApiInfo {
    name?: string | undefined;
    version?: string | undefined;
    environment?: string | undefined;
}

export class ErrorResponse implements IErrorResponse {
    fieldErrors!: FieldError[] | undefined;
    commonErrors!: string[] | undefined;

    constructor(data?: IErrorResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    static fromJS(data: any): ErrorResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorResponse();
        result.init(data);
        return result;
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["fieldErrors"])) {
                this.fieldErrors = [] as any;
                for (let item of _data["fieldErrors"])
                    this.fieldErrors!.push(FieldError.fromJS(item));
            }
            if (Array.isArray(_data["commonErrors"])) {
                this.commonErrors = [] as any;
                for (let item of _data["commonErrors"])
                    this.commonErrors!.push(item);
            }
        }
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.fieldErrors)) {
            data["fieldErrors"] = [];
            for (let item of this.fieldErrors)
                data["fieldErrors"].push(item.toJSON());
        }
        if (Array.isArray(this.commonErrors)) {
            data["commonErrors"] = [];
            for (let item of this.commonErrors)
                data["commonErrors"].push(item);
        }
        return data;
    }
}

export interface IErrorResponse {
    fieldErrors: FieldError[] | undefined;
    commonErrors: string[] | undefined;
}

export class FieldError implements IFieldError {
    identifier!: string | undefined;
    messages!: string[] | undefined;

    constructor(data?: IFieldError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    static fromJS(data: any): FieldError {
        data = typeof data === 'object' ? data : {};
        let result = new FieldError();
        result.init(data);
        return result;
    }

    init(_data?: any) {
        if (_data) {
            this.identifier = _data["identifier"];
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(item);
            }
        }
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["identifier"] = this.identifier;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item);
        }
        return data;
    }
}

export interface IFieldError {
    identifier: string | undefined;
    messages: string[] | undefined;
}

export class FinishTradeDto implements IFinishTradeDto {
    balance?: number | undefined;
    finishedAt?: Date | undefined;
    result?: ResultDto;

    constructor(data?: IFinishTradeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    static fromJS(data: any): FinishTradeDto {
        data = typeof data === 'object' ? data : {};
        let result = new FinishTradeDto();
        result.init(data);
        return result;
    }

    init(_data?: any) {
        if (_data) {
            this.balance = _data["balance"];
            this.finishedAt = _data["finishedAt"] ? new Date(_data["finishedAt"].toString()) : <any>undefined;
            this.result = _data["result"];
        }
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["balance"] = this.balance;
        data["finishedAt"] = this.finishedAt ? this.finishedAt.toISOString() : <any>undefined;
        data["result"] = this.result;
        return data;
    }
}

export interface IFinishTradeDto {
    balance?: number | undefined;
    finishedAt?: Date | undefined;
    result?: ResultDto;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class ReferenceDto implements IReferenceDto {
    type?: ReferenceTypeDto;
    link?: string | undefined;
    notes?: string | undefined;

    constructor(data?: IReferenceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    static fromJS(data: any): ReferenceDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReferenceDto();
        result.init(data);
        return result;
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.link = _data["link"];
            this.notes = _data["notes"];
        }
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["link"] = this.link;
        data["notes"] = this.notes;
        return data;
    }
}

export interface IReferenceDto {
    type?: ReferenceTypeDto;
    link?: string | undefined;
    notes?: string | undefined;
}

export enum ReferenceTypeDto {
    TradingView = "TradingView",
    Other = "Other",
}

export enum ResultDto {
    Win = "Win",
    Mediocre = "Mediocre",
    BreakEven = "BreakEven",
    Loss = "Loss",
}

export class SwaggerResponse<TResult> {
    status: number;
    headers: { [key: string]: any; };
    result: TResult;

    constructor(status: number, headers: { [key: string]: any; }, result: TResult) {
        this.status = status;
        this.headers = headers;
        this.result = result;
    }
}

export class SimpleTradingClientException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;
    protected isSimpleTradingClientException = true;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    static isSimpleTradingClientException(obj: any): obj is SimpleTradingClientException {
        return obj.isSimpleTradingClientException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: {
    [key: string]: any;
}, result?: any): any {
    throw new SimpleTradingClientException(message, status, response, headers, result);
}