//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export interface ISimpleTradingClient {

    /**
     * @return OK
     */
    getAppInfo(): Promise<SwaggerResponse<ApiInfo>>;

    /**
     * @param sort (optional) 
     * @param filter (optional) 
     * @param page (optional) 
     * @param pageSize (optional) 
     * @return OK
     */
    searchTrades(sort: string[] | undefined, filter: string[] | undefined, page: number | undefined, pageSize: number | undefined): Promise<SwaggerResponse<TradeDtoPageDto>>;

    /**
     * @param body (optional) 
     * @return OK
     */
    addTrade(body: AddTradeDto | undefined): Promise<SwaggerResponse<GuidSuccessResponse>>;

    /**
     * @return OK
     */
    getTrade(tradeId: string): Promise<SwaggerResponse<TradeDto>>;

    /**
     * @param body (optional) 
     * @return OK
     */
    updateTrade(tradeId: string, body: UpdateTradeDto | undefined): Promise<SwaggerResponse<SuccessResponse>>;

    /**
     * @return OK
     */
    deleteTrade(tradeId: string): Promise<SwaggerResponse<SuccessResponse>>;

    /**
     * @param body (optional) 
     * @return OK
     */
    closeTrade(tradeId: string, body: CloseTradeDto | undefined): Promise<SwaggerResponse<SuccessResponse>>;

    /**
     * @return OK
     */
    getReference(tradeId: string, referenceId: string): Promise<SwaggerResponse<ReferenceDto>>;

    /**
     * @param body (optional) 
     * @return OK
     */
    updateReference(tradeId: string, referenceId: string, body: UpdateReferenceDto | undefined): Promise<SwaggerResponse<SuccessResponse>>;

    /**
     * @return OK
     */
    deleteReference(tradeId: string, referenceId: string): Promise<SwaggerResponse<SuccessResponse>>;

    /**
     * @return OK
     */
    getReferences(tradeId: string): Promise<SwaggerResponse<ReferenceDto[]>>;

    /**
     * @param body (optional) 
     * @return OK
     */
    addReference(tradeId: string, body: AddReferenceDto | undefined): Promise<SwaggerResponse<GuidSuccessResponse>>;

    /**
     * @return OK
     */
    deleteReferences(tradeId: string): Promise<SwaggerResponse<UInt16SuccessResponse>>;

    /**
     * @param searchTerm (optional) 
     * @return OK
     */
    getProfiles(searchTerm: string | undefined): Promise<SwaggerResponse<ProfileDto[]>>;

    /**
     * @param searchTerm (optional) 
     * @return OK
     */
    getAssets(searchTerm: string | undefined): Promise<SwaggerResponse<AssetDto[]>>;

    /**
     * @param searchTerm (optional) 
     * @return OK
     */
    getCurrencies(searchTerm: string | undefined): Promise<SwaggerResponse<CurrencyDto[]>>;

    /**
     * @return OK
     */
    getUserLocalNow(): Promise<SwaggerResponse<void>>;
}

export class SimpleTradingClient implements ISimpleTradingClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "/";
    }

    /**
     * @return OK
     */
    getAppInfo(): Promise<SwaggerResponse<ApiInfo>> {
        let url_ = this.baseUrl + "/home/info";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAppInfo(_response);
        });
    }

    protected processGetAppInfo(response: Response): Promise<SwaggerResponse<ApiInfo>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiInfo.fromJS(resultData200);
            return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SwaggerResponse<ApiInfo>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @param sort (optional) 
     * @param filter (optional) 
     * @param page (optional) 
     * @param pageSize (optional) 
     * @return OK
     */
    searchTrades(sort: string[] | undefined, filter: string[] | undefined, page: number | undefined, pageSize: number | undefined): Promise<SwaggerResponse<TradeDtoPageDto>> {
        let url_ = this.baseUrl + "/trades?";
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            sort && sort.forEach(item => { url_ += "Sort=" + encodeURIComponent("" + item) + "&"; });
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            filter && filter.forEach(item => { url_ += "Filter=" + encodeURIComponent("" + item) + "&"; });
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSearchTrades(_response);
        });
    }

    protected processSearchTrades(response: Response): Promise<SwaggerResponse<TradeDtoPageDto>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TradeDtoPageDto.fromJS(resultData200);
            return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SwaggerResponse<TradeDtoPageDto>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    addTrade(body: AddTradeDto | undefined): Promise<SwaggerResponse<GuidSuccessResponse>> {
        let url_ = this.baseUrl + "/trades";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddTrade(_response);
        });
    }

    protected processAddTrade(response: Response): Promise<SwaggerResponse<GuidSuccessResponse>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GuidSuccessResponse.fromJS(resultData200);
            return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ErrorResponse.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = ErrorResponse.fromJS(resultData422);
            return throwException("Unprocessable Content", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SwaggerResponse<GuidSuccessResponse>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @return OK
     */
    getTrade(tradeId: string): Promise<SwaggerResponse<TradeDto>> {
        let url_ = this.baseUrl + "/trades/{tradeId}";
        if (tradeId === undefined || tradeId === null)
            throw new Error("The parameter 'tradeId' must be defined.");
        url_ = url_.replace("{tradeId}", encodeURIComponent("" + tradeId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTrade(_response);
        });
    }

    protected processGetTrade(response: Response): Promise<SwaggerResponse<TradeDto>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TradeDto.fromJS(resultData200);
            return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SwaggerResponse<TradeDto>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    updateTrade(tradeId: string, body: UpdateTradeDto | undefined): Promise<SwaggerResponse<SuccessResponse>> {
        let url_ = this.baseUrl + "/trades/{tradeId}";
        if (tradeId === undefined || tradeId === null)
            throw new Error("The parameter 'tradeId' must be defined.");
        url_ = url_.replace("{tradeId}", encodeURIComponent("" + tradeId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateTrade(_response);
        });
    }

    protected processUpdateTrade(response: Response): Promise<SwaggerResponse<SuccessResponse>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SuccessResponse.fromJS(resultData200);
            return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ErrorResponse.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = ErrorResponse.fromJS(resultData422);
            return throwException("Unprocessable Content", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SwaggerResponse<SuccessResponse>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @return OK
     */
    deleteTrade(tradeId: string): Promise<SwaggerResponse<SuccessResponse>> {
        let url_ = this.baseUrl + "/trades/{tradeId}";
        if (tradeId === undefined || tradeId === null)
            throw new Error("The parameter 'tradeId' must be defined.");
        url_ = url_.replace("{tradeId}", encodeURIComponent("" + tradeId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteTrade(_response);
        });
    }

    protected processDeleteTrade(response: Response): Promise<SwaggerResponse<SuccessResponse>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SuccessResponse.fromJS(resultData200);
            return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SwaggerResponse<SuccessResponse>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    closeTrade(tradeId: string, body: CloseTradeDto | undefined): Promise<SwaggerResponse<SuccessResponse>> {
        let url_ = this.baseUrl + "/trades/{tradeId}/close";
        if (tradeId === undefined || tradeId === null)
            throw new Error("The parameter 'tradeId' must be defined.");
        url_ = url_.replace("{tradeId}", encodeURIComponent("" + tradeId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCloseTrade(_response);
        });
    }

    protected processCloseTrade(response: Response): Promise<SwaggerResponse<SuccessResponse>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SuccessResponse.fromJS(resultData200);
            return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ErrorResponse.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = ErrorResponse.fromJS(resultData422);
            return throwException("Unprocessable Content", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SwaggerResponse<SuccessResponse>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @return OK
     */
    getReference(tradeId: string, referenceId: string): Promise<SwaggerResponse<ReferenceDto>> {
        let url_ = this.baseUrl + "/trades/{tradeId}/references/{referenceId}";
        if (tradeId === undefined || tradeId === null)
            throw new Error("The parameter 'tradeId' must be defined.");
        url_ = url_.replace("{tradeId}", encodeURIComponent("" + tradeId));
        if (referenceId === undefined || referenceId === null)
            throw new Error("The parameter 'referenceId' must be defined.");
        url_ = url_.replace("{referenceId}", encodeURIComponent("" + referenceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetReference(_response);
        });
    }

    protected processGetReference(response: Response): Promise<SwaggerResponse<ReferenceDto>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReferenceDto.fromJS(resultData200);
            return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ErrorResponse.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SwaggerResponse<ReferenceDto>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    updateReference(tradeId: string, referenceId: string, body: UpdateReferenceDto | undefined): Promise<SwaggerResponse<SuccessResponse>> {
        let url_ = this.baseUrl + "/trades/{tradeId}/references/{referenceId}";
        if (tradeId === undefined || tradeId === null)
            throw new Error("The parameter 'tradeId' must be defined.");
        url_ = url_.replace("{tradeId}", encodeURIComponent("" + tradeId));
        if (referenceId === undefined || referenceId === null)
            throw new Error("The parameter 'referenceId' must be defined.");
        url_ = url_.replace("{referenceId}", encodeURIComponent("" + referenceId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateReference(_response);
        });
    }

    protected processUpdateReference(response: Response): Promise<SwaggerResponse<SuccessResponse>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SuccessResponse.fromJS(resultData200);
            return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ErrorResponse.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SwaggerResponse<SuccessResponse>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @return OK
     */
    deleteReference(tradeId: string, referenceId: string): Promise<SwaggerResponse<SuccessResponse>> {
        let url_ = this.baseUrl + "/trades/{tradeId}/references/{referenceId}";
        if (tradeId === undefined || tradeId === null)
            throw new Error("The parameter 'tradeId' must be defined.");
        url_ = url_.replace("{tradeId}", encodeURIComponent("" + tradeId));
        if (referenceId === undefined || referenceId === null)
            throw new Error("The parameter 'referenceId' must be defined.");
        url_ = url_.replace("{referenceId}", encodeURIComponent("" + referenceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteReference(_response);
        });
    }

    protected processDeleteReference(response: Response): Promise<SwaggerResponse<SuccessResponse>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SuccessResponse.fromJS(resultData200);
            return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ErrorResponse.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SwaggerResponse<SuccessResponse>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @return OK
     */
    getReferences(tradeId: string): Promise<SwaggerResponse<ReferenceDto[]>> {
        let url_ = this.baseUrl + "/trades/{tradeId}/references";
        if (tradeId === undefined || tradeId === null)
            throw new Error("The parameter 'tradeId' must be defined.");
        url_ = url_.replace("{tradeId}", encodeURIComponent("" + tradeId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetReferences(_response);
        });
    }

    protected processGetReferences(response: Response): Promise<SwaggerResponse<ReferenceDto[]>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ReferenceDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ErrorResponse.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SwaggerResponse<ReferenceDto[]>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    addReference(tradeId: string, body: AddReferenceDto | undefined): Promise<SwaggerResponse<GuidSuccessResponse>> {
        let url_ = this.baseUrl + "/trades/{tradeId}/references";
        if (tradeId === undefined || tradeId === null)
            throw new Error("The parameter 'tradeId' must be defined.");
        url_ = url_.replace("{tradeId}", encodeURIComponent("" + tradeId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddReference(_response);
        });
    }

    protected processAddReference(response: Response): Promise<SwaggerResponse<GuidSuccessResponse>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GuidSuccessResponse.fromJS(resultData200);
            return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ErrorResponse.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = ErrorResponse.fromJS(resultData422);
            return throwException("Unprocessable Content", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SwaggerResponse<GuidSuccessResponse>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @return OK
     */
    deleteReferences(tradeId: string): Promise<SwaggerResponse<UInt16SuccessResponse>> {
        let url_ = this.baseUrl + "/trades/{tradeId}/references";
        if (tradeId === undefined || tradeId === null)
            throw new Error("The parameter 'tradeId' must be defined.");
        url_ = url_.replace("{tradeId}", encodeURIComponent("" + tradeId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteReferences(_response);
        });
    }

    protected processDeleteReferences(response: Response): Promise<SwaggerResponse<UInt16SuccessResponse>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UInt16SuccessResponse.fromJS(resultData200);
            return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ErrorResponse.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SwaggerResponse<UInt16SuccessResponse>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @param searchTerm (optional) 
     * @return OK
     */
    getProfiles(searchTerm: string | undefined): Promise<SwaggerResponse<ProfileDto[]>> {
        let url_ = this.baseUrl + "/profiles?";
        if (searchTerm === null)
            throw new Error("The parameter 'searchTerm' cannot be null.");
        else if (searchTerm !== undefined)
            url_ += "searchTerm=" + encodeURIComponent("" + searchTerm) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetProfiles(_response);
        });
    }

    protected processGetProfiles(response: Response): Promise<SwaggerResponse<ProfileDto[]>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProfileDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SwaggerResponse<ProfileDto[]>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @param searchTerm (optional) 
     * @return OK
     */
    getAssets(searchTerm: string | undefined): Promise<SwaggerResponse<AssetDto[]>> {
        let url_ = this.baseUrl + "/assets?";
        if (searchTerm === null)
            throw new Error("The parameter 'searchTerm' cannot be null.");
        else if (searchTerm !== undefined)
            url_ += "searchTerm=" + encodeURIComponent("" + searchTerm) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAssets(_response);
        });
    }

    protected processGetAssets(response: Response): Promise<SwaggerResponse<AssetDto[]>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AssetDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SwaggerResponse<AssetDto[]>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @param searchTerm (optional) 
     * @return OK
     */
    getCurrencies(searchTerm: string | undefined): Promise<SwaggerResponse<CurrencyDto[]>> {
        let url_ = this.baseUrl + "/currencies?";
        if (searchTerm === null)
            throw new Error("The parameter 'searchTerm' cannot be null.");
        else if (searchTerm !== undefined)
            url_ += "searchTerm=" + encodeURIComponent("" + searchTerm) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrencies(_response);
        });
    }

    protected processGetCurrencies(response: Response): Promise<SwaggerResponse<CurrencyDto[]>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CurrencyDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SwaggerResponse<CurrencyDto[]>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @return OK
     */
    getUserLocalNow(): Promise<SwaggerResponse<void>> {
        let url_ = this.baseUrl + "/usersettings/local-now";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserLocalNow(_response);
        });
    }

    protected processGetUserLocalNow(response: Response): Promise<SwaggerResponse<void>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            return new SwaggerResponse(status, _headers, null as any);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, null as any));
    }
}

export class AddReferenceDto implements IAddReferenceDto {
    type?: ReferenceTypeDto;
    link?: string | undefined;
    notes?: string | undefined;

    constructor(data?: IAddReferenceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.link = _data["link"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): AddReferenceDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddReferenceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["link"] = this.link;
        data["notes"] = this.notes;
        return data;
    }
}

export interface IAddReferenceDto {
    type?: ReferenceTypeDto;
    link?: string | undefined;
    notes?: string | undefined;
}

export class AddTradeDto implements IAddTradeDto {
    assetId?: string | undefined;
    profileId?: string | undefined;
    opened?: Date | undefined;
    closed?: Date | undefined;
    size?: number | undefined;
    result?: ResultDto;
    balance?: number | undefined;
    currencyId?: string | undefined;
    entryPrice?: number | undefined;
    stopLoss?: number | undefined;
    takeProfit?: number | undefined;
    exitPrice?: number | undefined;
    notes?: string | undefined;
    references?: AddReferenceDto[] | undefined;

    constructor(data?: IAddTradeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"];
            this.profileId = _data["profileId"];
            this.opened = _data["opened"] ? new Date(_data["opened"].toString()) : <any>undefined;
            this.closed = _data["closed"] ? new Date(_data["closed"].toString()) : <any>undefined;
            this.size = _data["size"];
            this.result = _data["result"];
            this.balance = _data["balance"];
            this.currencyId = _data["currencyId"];
            this.entryPrice = _data["entryPrice"];
            this.stopLoss = _data["stopLoss"];
            this.takeProfit = _data["takeProfit"];
            this.exitPrice = _data["exitPrice"];
            this.notes = _data["notes"];
            if (Array.isArray(_data["references"])) {
                this.references = [] as any;
                for (let item of _data["references"])
                    this.references!.push(AddReferenceDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AddTradeDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddTradeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId;
        data["profileId"] = this.profileId;
        data["opened"] = this.opened ? this.opened.toISOString() : <any>undefined;
        data["closed"] = this.closed ? this.closed.toISOString() : <any>undefined;
        data["size"] = this.size;
        data["result"] = this.result;
        data["balance"] = this.balance;
        data["currencyId"] = this.currencyId;
        data["entryPrice"] = this.entryPrice;
        data["stopLoss"] = this.stopLoss;
        data["takeProfit"] = this.takeProfit;
        data["exitPrice"] = this.exitPrice;
        data["notes"] = this.notes;
        if (Array.isArray(this.references)) {
            data["references"] = [];
            for (let item of this.references)
                data["references"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAddTradeDto {
    assetId?: string | undefined;
    profileId?: string | undefined;
    opened?: Date | undefined;
    closed?: Date | undefined;
    size?: number | undefined;
    result?: ResultDto;
    balance?: number | undefined;
    currencyId?: string | undefined;
    entryPrice?: number | undefined;
    stopLoss?: number | undefined;
    takeProfit?: number | undefined;
    exitPrice?: number | undefined;
    notes?: string | undefined;
    references?: AddReferenceDto[] | undefined;
}

export class ApiInfo implements IApiInfo {
    name?: string | undefined;
    version?: string | undefined;
    environment?: string | undefined;

    constructor(data?: IApiInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.version = _data["version"];
            this.environment = _data["environment"];
        }
    }

    static fromJS(data: any): ApiInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ApiInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["version"] = this.version;
        data["environment"] = this.environment;
        return data;
    }
}

export interface IApiInfo {
    name?: string | undefined;
    version?: string | undefined;
    environment?: string | undefined;
}

export class AssetDto implements IAssetDto {
    id!: string;
    symbol!: string | undefined;
    name!: string | undefined;

    constructor(data?: IAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.symbol = _data["symbol"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): AssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new AssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["symbol"] = this.symbol;
        data["name"] = this.name;
        return data;
    }
}

export interface IAssetDto {
    id: string;
    symbol: string | undefined;
    name: string | undefined;
}

export class CloseTradeDto implements ICloseTradeDto {
    balance?: number | undefined;
    exitPrice?: number | undefined;
    closed?: Date | undefined;
    result?: ResultDto;

    constructor(data?: ICloseTradeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.balance = _data["balance"];
            this.exitPrice = _data["exitPrice"];
            this.closed = _data["closed"] ? new Date(_data["closed"].toString()) : <any>undefined;
            this.result = _data["result"];
        }
    }

    static fromJS(data: any): CloseTradeDto {
        data = typeof data === 'object' ? data : {};
        let result = new CloseTradeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["balance"] = this.balance;
        data["exitPrice"] = this.exitPrice;
        data["closed"] = this.closed ? this.closed.toISOString() : <any>undefined;
        data["result"] = this.result;
        return data;
    }
}

export interface ICloseTradeDto {
    balance?: number | undefined;
    exitPrice?: number | undefined;
    closed?: Date | undefined;
    result?: ResultDto;
}

export class CurrencyDto implements ICurrencyDto {
    id!: string;
    isoCode!: string | undefined;
    name!: string | undefined;

    constructor(data?: ICurrencyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.isoCode = _data["isoCode"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CurrencyDto {
        data = typeof data === 'object' ? data : {};
        let result = new CurrencyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isoCode"] = this.isoCode;
        data["name"] = this.name;
        return data;
    }
}

export interface ICurrencyDto {
    id: string;
    isoCode: string | undefined;
    name: string | undefined;
}

export class DecimalNullableUpdatedValue implements IDecimalNullableUpdatedValue {
    value?: number | undefined;

    constructor(data?: IDecimalNullableUpdatedValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): DecimalNullableUpdatedValue {
        data = typeof data === 'object' ? data : {};
        let result = new DecimalNullableUpdatedValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data;
    }
}

export interface IDecimalNullableUpdatedValue {
    value?: number | undefined;
}

export class ErrorResponse implements IErrorResponse {
    fieldErrors!: FieldError[] | undefined;
    commonErrors!: string[] | undefined;

    constructor(data?: IErrorResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["fieldErrors"])) {
                this.fieldErrors = [] as any;
                for (let item of _data["fieldErrors"])
                    this.fieldErrors!.push(FieldError.fromJS(item));
            }
            if (Array.isArray(_data["commonErrors"])) {
                this.commonErrors = [] as any;
                for (let item of _data["commonErrors"])
                    this.commonErrors!.push(item);
            }
        }
    }

    static fromJS(data: any): ErrorResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.fieldErrors)) {
            data["fieldErrors"] = [];
            for (let item of this.fieldErrors)
                data["fieldErrors"].push(item.toJSON());
        }
        if (Array.isArray(this.commonErrors)) {
            data["commonErrors"] = [];
            for (let item of this.commonErrors)
                data["commonErrors"].push(item);
        }
        return data;
    }
}

export interface IErrorResponse {
    fieldErrors: FieldError[] | undefined;
    commonErrors: string[] | undefined;
}

export class FieldError implements IFieldError {
    identifier!: string | undefined;
    messages!: string[] | undefined;

    constructor(data?: IFieldError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.identifier = _data["identifier"];
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(item);
            }
        }
    }

    static fromJS(data: any): FieldError {
        data = typeof data === 'object' ? data : {};
        let result = new FieldError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["identifier"] = this.identifier;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item);
        }
        return data;
    }
}

export interface IFieldError {
    identifier: string | undefined;
    messages: string[] | undefined;
}

export class GuidSuccessResponse implements IGuidSuccessResponse {
    data?: string;
    warnings?: string[] | undefined;

    constructor(data?: IGuidSuccessResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"];
            if (Array.isArray(_data["warnings"])) {
                this.warnings = [] as any;
                for (let item of _data["warnings"])
                    this.warnings!.push(item);
            }
        }
    }

    static fromJS(data: any): GuidSuccessResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GuidSuccessResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data;
        if (Array.isArray(this.warnings)) {
            data["warnings"] = [];
            for (let item of this.warnings)
                data["warnings"].push(item);
        }
        return data;
    }
}

export interface IGuidSuccessResponse {
    data?: string;
    warnings?: string[] | undefined;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class ProfileDto implements IProfileDto {
    id!: string;
    name!: string | undefined;
    description?: string | undefined;
    isSelected!: boolean;

    constructor(data?: IProfileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.isSelected = _data["isSelected"];
        }
    }

    static fromJS(data: any): ProfileDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProfileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["isSelected"] = this.isSelected;
        return data;
    }
}

export interface IProfileDto {
    id: string;
    name: string | undefined;
    description?: string | undefined;
    isSelected: boolean;
}

export class ReferenceDto implements IReferenceDto {
    id!: string;
    type!: ReferenceTypeDto;
    link!: string | undefined;
    notes?: string | undefined;

    constructor(data?: IReferenceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.link = _data["link"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): ReferenceDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReferenceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["link"] = this.link;
        data["notes"] = this.notes;
        return data;
    }
}

export interface IReferenceDto {
    id: string;
    type: ReferenceTypeDto;
    link: string | undefined;
    notes?: string | undefined;
}

export enum ReferenceTypeDto {
    TradingView = "TradingView",
    Other = "Other",
}

export enum ResultDto {
    Win = "Win",
    Mediocre = "Mediocre",
    BreakEven = "BreakEven",
    Loss = "Loss",
}

export class ResultDtoNullableUpdatedValue implements IResultDtoNullableUpdatedValue {
    value?: ResultDto;

    constructor(data?: IResultDtoNullableUpdatedValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): ResultDtoNullableUpdatedValue {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDtoNullableUpdatedValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data;
    }
}

export interface IResultDtoNullableUpdatedValue {
    value?: ResultDto;
}

export class StringUpdatedValue implements IStringUpdatedValue {
    value?: string | undefined;

    constructor(data?: IStringUpdatedValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): StringUpdatedValue {
        data = typeof data === 'object' ? data : {};
        let result = new StringUpdatedValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data;
    }
}

export interface IStringUpdatedValue {
    value?: string | undefined;
}

export class SuccessResponse implements ISuccessResponse {
    warnings?: string[] | undefined;

    constructor(data?: ISuccessResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["warnings"])) {
                this.warnings = [] as any;
                for (let item of _data["warnings"])
                    this.warnings!.push(item);
            }
        }
    }

    static fromJS(data: any): SuccessResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SuccessResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.warnings)) {
            data["warnings"] = [];
            for (let item of this.warnings)
                data["warnings"].push(item);
        }
        return data;
    }
}

export interface ISuccessResponse {
    warnings?: string[] | undefined;
}

export class TradeDto implements ITradeDto {
    id?: string;
    assetId?: string;
    asset!: string | undefined;
    profileId?: string;
    profile!: string | undefined;
    size?: number;
    opened?: Date;
    closed?: Date | undefined;
    balance?: number | undefined;
    result?: ResultDto;
    performance?: number | undefined;
    isClosed?: boolean;
    currencyId?: string;
    currency!: string | undefined;
    entry?: number;
    stopLoss?: number | undefined;
    takeProfit?: number | undefined;
    exitPrice?: number | undefined;
    riskRewardRatio?: number | undefined;
    references!: ReferenceDto[] | undefined;
    notes?: string | undefined;

    constructor(data?: ITradeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.assetId = _data["assetId"];
            this.asset = _data["asset"];
            this.profileId = _data["profileId"];
            this.profile = _data["profile"];
            this.size = _data["size"];
            this.opened = _data["opened"] ? new Date(_data["opened"].toString()) : <any>undefined;
            this.closed = _data["closed"] ? new Date(_data["closed"].toString()) : <any>undefined;
            this.balance = _data["balance"];
            this.result = _data["result"];
            this.performance = _data["performance"];
            this.isClosed = _data["isClosed"];
            this.currencyId = _data["currencyId"];
            this.currency = _data["currency"];
            this.entry = _data["entry"];
            this.stopLoss = _data["stopLoss"];
            this.takeProfit = _data["takeProfit"];
            this.exitPrice = _data["exitPrice"];
            this.riskRewardRatio = _data["riskRewardRatio"];
            if (Array.isArray(_data["references"])) {
                this.references = [] as any;
                for (let item of _data["references"])
                    this.references!.push(ReferenceDto.fromJS(item));
            }
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): TradeDto {
        data = typeof data === 'object' ? data : {};
        let result = new TradeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["assetId"] = this.assetId;
        data["asset"] = this.asset;
        data["profileId"] = this.profileId;
        data["profile"] = this.profile;
        data["size"] = this.size;
        data["opened"] = this.opened ? this.opened.toISOString() : <any>undefined;
        data["closed"] = this.closed ? this.closed.toISOString() : <any>undefined;
        data["balance"] = this.balance;
        data["result"] = this.result;
        data["performance"] = this.performance;
        data["isClosed"] = this.isClosed;
        data["currencyId"] = this.currencyId;
        data["currency"] = this.currency;
        data["entry"] = this.entry;
        data["stopLoss"] = this.stopLoss;
        data["takeProfit"] = this.takeProfit;
        data["exitPrice"] = this.exitPrice;
        data["riskRewardRatio"] = this.riskRewardRatio;
        if (Array.isArray(this.references)) {
            data["references"] = [];
            for (let item of this.references)
                data["references"].push(item.toJSON());
        }
        data["notes"] = this.notes;
        return data;
    }
}

export interface ITradeDto {
    id?: string;
    assetId?: string;
    asset: string | undefined;
    profileId?: string;
    profile: string | undefined;
    size?: number;
    opened?: Date;
    closed?: Date | undefined;
    balance?: number | undefined;
    result?: ResultDto;
    performance?: number | undefined;
    isClosed?: boolean;
    currencyId?: string;
    currency: string | undefined;
    entry?: number;
    stopLoss?: number | undefined;
    takeProfit?: number | undefined;
    exitPrice?: number | undefined;
    riskRewardRatio?: number | undefined;
    references: ReferenceDto[] | undefined;
    notes?: string | undefined;
}

export class TradeDtoPageDto implements ITradeDtoPageDto {
    data?: TradeDto[] | undefined;
    count?: number;
    totalCount?: number;
    page?: number;
    pageSize?: number;

    constructor(data?: ITradeDtoPageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(TradeDto.fromJS(item));
            }
            this.count = _data["count"];
            this.totalCount = _data["totalCount"];
            this.page = _data["page"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): TradeDtoPageDto {
        data = typeof data === 'object' ? data : {};
        let result = new TradeDtoPageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["count"] = this.count;
        data["totalCount"] = this.totalCount;
        data["page"] = this.page;
        data["pageSize"] = this.pageSize;
        return data;
    }
}

export interface ITradeDtoPageDto {
    data?: TradeDto[] | undefined;
    count?: number;
    totalCount?: number;
    page?: number;
    pageSize?: number;
}

export class UInt16SuccessResponse implements IUInt16SuccessResponse {
    data?: number;
    warnings?: string[] | undefined;

    constructor(data?: IUInt16SuccessResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"];
            if (Array.isArray(_data["warnings"])) {
                this.warnings = [] as any;
                for (let item of _data["warnings"])
                    this.warnings!.push(item);
            }
        }
    }

    static fromJS(data: any): UInt16SuccessResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UInt16SuccessResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data;
        if (Array.isArray(this.warnings)) {
            data["warnings"] = [];
            for (let item of this.warnings)
                data["warnings"].push(item);
        }
        return data;
    }
}

export interface IUInt16SuccessResponse {
    data?: number;
    warnings?: string[] | undefined;
}

export class UpdateReferenceDto implements IUpdateReferenceDto {
    type?: ReferenceTypeDto;
    link?: string | undefined;
    notes?: StringUpdatedValue;

    constructor(data?: IUpdateReferenceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.link = _data["link"];
            this.notes = _data["notes"] ? StringUpdatedValue.fromJS(_data["notes"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateReferenceDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateReferenceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["link"] = this.link;
        data["notes"] = this.notes ? this.notes.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUpdateReferenceDto {
    type?: ReferenceTypeDto;
    link?: string | undefined;
    notes?: StringUpdatedValue;
}

export class UpdateTradeDto implements IUpdateTradeDto {
    assetId?: string | undefined;
    profileId?: string | undefined;
    opened?: Date | undefined;
    closed?: Date | undefined;
    size?: number | undefined;
    result?: ResultDtoNullableUpdatedValue;
    balance?: number | undefined;
    currencyId?: string | undefined;
    entryPrice?: number | undefined;
    stopLoss?: DecimalNullableUpdatedValue;
    takeProfit?: DecimalNullableUpdatedValue;
    exitPrice?: DecimalNullableUpdatedValue;
    notes?: StringUpdatedValue;

    constructor(data?: IUpdateTradeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"];
            this.profileId = _data["profileId"];
            this.opened = _data["opened"] ? new Date(_data["opened"].toString()) : <any>undefined;
            this.closed = _data["closed"] ? new Date(_data["closed"].toString()) : <any>undefined;
            this.size = _data["size"];
            this.result = _data["result"] ? ResultDtoNullableUpdatedValue.fromJS(_data["result"]) : <any>undefined;
            this.balance = _data["balance"];
            this.currencyId = _data["currencyId"];
            this.entryPrice = _data["entryPrice"];
            this.stopLoss = _data["stopLoss"] ? DecimalNullableUpdatedValue.fromJS(_data["stopLoss"]) : <any>undefined;
            this.takeProfit = _data["takeProfit"] ? DecimalNullableUpdatedValue.fromJS(_data["takeProfit"]) : <any>undefined;
            this.exitPrice = _data["exitPrice"] ? DecimalNullableUpdatedValue.fromJS(_data["exitPrice"]) : <any>undefined;
            this.notes = _data["notes"] ? StringUpdatedValue.fromJS(_data["notes"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateTradeDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTradeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId;
        data["profileId"] = this.profileId;
        data["opened"] = this.opened ? this.opened.toISOString() : <any>undefined;
        data["closed"] = this.closed ? this.closed.toISOString() : <any>undefined;
        data["size"] = this.size;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["balance"] = this.balance;
        data["currencyId"] = this.currencyId;
        data["entryPrice"] = this.entryPrice;
        data["stopLoss"] = this.stopLoss ? this.stopLoss.toJSON() : <any>undefined;
        data["takeProfit"] = this.takeProfit ? this.takeProfit.toJSON() : <any>undefined;
        data["exitPrice"] = this.exitPrice ? this.exitPrice.toJSON() : <any>undefined;
        data["notes"] = this.notes ? this.notes.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUpdateTradeDto {
    assetId?: string | undefined;
    profileId?: string | undefined;
    opened?: Date | undefined;
    closed?: Date | undefined;
    size?: number | undefined;
    result?: ResultDtoNullableUpdatedValue;
    balance?: number | undefined;
    currencyId?: string | undefined;
    entryPrice?: number | undefined;
    stopLoss?: DecimalNullableUpdatedValue;
    takeProfit?: DecimalNullableUpdatedValue;
    exitPrice?: DecimalNullableUpdatedValue;
    notes?: StringUpdatedValue;
}

export class SwaggerResponse<TResult> {
    status: number;
    headers: { [key: string]: any; };
    result: TResult;

    constructor(status: number, headers: { [key: string]: any; }, result: TResult)
    {
        this.status = status;
        this.headers = headers;
        this.result = result;
    }
}

export class SimpleTradingClientException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSimpleTradingClientException = true;

    static isSimpleTradingClientException(obj: any): obj is SimpleTradingClientException {
        return obj.isSimpleTradingClientException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    throw new SimpleTradingClientException(message, status, response, headers, result);
}