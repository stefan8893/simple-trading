namespace SimpleTrading.Domain.Generators;

public static class SourceTemplates
{
    public static string CreateProxy(InteractorContext ctx)
    {
        var requestModelFullQualifiedType = ctx.RequestModel is null
            ? string.Empty
            : ctx.RequestModel.ToDisplayString();

        List<string> namespaces =
        [
            "System",
            "System.Threading.Tasks",
            "System.Diagnostics",
            "SimpleTrading.Domain.Infrastructure",
            OnValidation("FluentValidation"),
            ctx.Interactor.ContainingNamespace.ToDisplayString()
        ];

        var usingStatements = namespaces
            .Where(x => !string.IsNullOrWhiteSpace(x))
            .Distinct()
            .Select(static x => $"using {x};");

        var requestModelParameter = string.IsNullOrWhiteSpace(requestModelFullQualifiedType)
            ? string.Empty
            : $"{requestModelFullQualifiedType} requestModel";

        var validatorsType = $"IEnumerable<IValidator<{requestModelFullQualifiedType}>>";

        // lang=C#
        return $$"""
                 //----------------------
                 // <auto-generated>
                 //     Generated using Source Generators
                 // </auto-generated>
                 //----------------------

                 {{string.Join("\n\r", usingStatements)}}

                 namespace {{ctx.Interactor.ContainingNamespace.ToDisplayString()}};

                 public interface {{ctx.InteractorInterfaceName}}
                 {
                     Task<{{ctx.ResponseModel.ToDisplayString()}}> Execute({{requestModelParameter}});
                 }

                 public sealed class {{ctx.InteractorProxyName}} : {{ctx.InteractorInterfaceName}}
                 {
                     private readonly {{ctx.ClosedInteractorInterface.ToDisplayString()}}  _interactor;
                     {{OnValidation($"private readonly {validatorsType} _validators;")}}
                     
                     public {{ctx.InteractorProxyName}}(
                              {{ctx.ClosedInteractorInterface.ToDisplayString()}} interactor{{OnValidation(",")}}
                              {{OnValidation($"{validatorsType} validators")}})
                     {
                         _interactor = interactor;
                         {{OnValidation("_validators = validators;")}}
                     }
                     
                     [DebuggerStepThrough]
                     public async Task<{{ctx.ResponseModel.ToDisplayString()}}> Execute({{requestModelParameter}}) 
                     {
                            {{OnValidation(
                                // lang=C#
                                """
                                foreach(var validator in _validators) 
                                {
                                    var validationResult = await validator.ValidateAsync(requestModel);
                                    if (!validationResult.IsValid)
                                        return new BadInput(validationResult);
                                }
                                """)}}
                 
                         return await {{OnContainsRequestModel("_interactor.Execute(requestModel);",
                             "_interactor.Execute();")}}
                     }
                 }    
                 """;

        string OnContainsRequestModel(string onRequestModelExists, string otherwise = "")
        {
            return ctx.RequestModel is not null ? onRequestModelExists : otherwise;
        }

        string OnValidation(string onValidation, string otherwise = "")
        {
            var validateRequestModel = ctx.RequestModel is not null &&
                                       ctx.ResponseModel.IsGenericType &&
                                       ctx.ResponseModel.TypeArguments.Any(x => x.Name == "BadInput");

            return validateRequestModel ? onValidation : otherwise;
        }
    }
}